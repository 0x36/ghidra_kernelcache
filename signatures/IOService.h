virtual const OSMetaClass * getMetaClass();
virtual bool isEqualTo(const OSMetaClassBase * anObject);
virtual kern_return_t Dispatch(const IORPC rpc);
virtual bool init();
virtual void free();
virtual bool serializeProperties( OSSerialize * s );
virtual bool requestTerminate( IOService * provider, IOOptionBits options );
virtual bool willTerminate( IOService * provider, IOOptionBits options );
virtual bool didTerminate( IOService * provider, IOOptionBits options, bool * defer );
virtual SInt32 nextIdleTimeout(AbsoluteTime currentTime,AbsoluteTime lastActivity, unsigned int powerState);
virtual void systemWillShutdown( IOOptionBits specifier );
virtual IOService * copyClientWithCategory( const OSSymbol * category );
typedef void IOReportChannelList;
virtual IOReturn configureReport(IOReportChannelList *channels,void *action,void * result,void *destination);
virtual IOReturn updateReport(IOReportChannelList*channels,void * action,void *result,void *destination);
virtual IOOptionBits getState( void );
virtual void registerService( IOOptionBits options);
virtual bool start( IOService * provider );
virtual void stop( IOService * provider );
virtual bool open(   IOService * forClient,IOOptionBits      options,void * arg );
virtual void close( IOService * forClient,IOOptionBits options);
virtual bool isOpen( const IOService * forClient);
virtual bool handleOpen(IOService * forClient,IOOptionBits options,void * arg );
virtual void handleClose(IOService * forClient,IOOptionBits options );
virtual bool handleIsOpen(  const IOService * forClient );
virtual bool terminate( IOOptionBits options);
virtual bool finalize( IOOptionBits options );
virtual bool init_1( OSDictionary * dictionary );
virtual bool init_2( IORegistryEntry * from,const IORegistryPlane * inPlane );
virtual void free( void );
virtual bool lockForArbitration( bool isSuccessRequired);
virtual void unlockForArbitration( void );
virtual bool terminateClient( IOService * client, IOOptionBits options );
virtual UInt32 getBusyState( void );
virtual void adjustBusy( SInt32 delta );
virtual bool matchPropertyTable( OSDictionary * table,SInt32       * score );
virtual bool matchPropertyTable_1( OSDictionary * table );
virtual IOService * matchLocation( IOService * client );
virtual bool addNeededResource( const char * key );
virtual bool compareProperty(   OSDictionary   * matching,const char     * key );
virtual bool compareProperty_1(   OSDictionary   * matching,const OSString * key );
virtual bool compareProperties( OSDictionary   * matching,OSCollection   * keys );
virtual bool attach( IOService * provider );
virtual void detach( IOService * provider );
virtual IOService * getProvider( void );
virtual IOWorkLoop * getWorkLoop();
virtual OSIterator * getProviderIterator( void );
virtual OSIterator * getOpenProviderIterator( void );
virtual IOService * getClient( void );
virtual OSIterator *  getClientIterator( void );
virtual OSIterator *  getOpenClientIterator( void );
virtual IOReturn callPlatformFunction( const OSSymbol * functionName,bool waitForFunction,void *param1, void *param2,void *param3, void *param4 );
virtual IOReturn callPlatformFunction_1( const char * functionName,bool waitForFunction,void *param1, void *param2,void *param3, void *param4 );
virtual IOReturn getResources( void );
typedef uint IOItemCount;
virtual IOItemCount getDeviceMemoryCount( void );
//typedef char IODeviceMemory;
virtual IODeviceMemory * getDeviceMemoryWithIndex( unsigned int index );
virtual IOMemoryMap * mapDeviceMemoryWithIndex( unsigned int index,IOOptionBits options );
virtual OSArray * getDeviceMemory( void );
virtual void setDeviceMemory( OSArray * array );
virtual IOReturn registerInterrupt(int source, OSObject *target,void * handler,void *refCon);
virtual IOReturn unregisterInterrupt(int source);
virtual IOReturn getInterruptType(int source, int *interruptType);
virtual IOReturn enableInterrupt(int source);
virtual IOReturn disableInterrupt(int source);
virtual IOReturn causeInterrupt(int source);
virtual IOReturn requestProbe( IOOptionBits options );
virtual IOReturn message( UInt32 type, IOService * provider,void * argument);
virtual IOReturn messageClient( UInt32 messageType, OSObject * client,void * messageArgument , vm_size_t argSize  );
virtual IOReturn messageClients( UInt32 type,void * argument, vm_size_t argSize);
virtual IONotifier * registerInterest( const OSSymbol * typeOfInterest,void * handler,void * target, void * ref);
virtual void applyToProviders( void * applier,void * context );
virtual void applyToClients( void * applier,void * context );
virtual void applyToInterested( const OSSymbol * typeOfInterest, void * applier,void * context );
virtual IOReturn acknowledgeNotification( void *notification,IOOptionBits response );
virtual IOReturn newUserClient( task_t owningTask, void * securityID,UInt32 type, OSDictionary * properties,IOUserClient ** handler );
virtual IOReturn newUserClient_1( task_t owningTask, void * securityID,UInt32 type,IOUserClient ** handler );
virtual const char * stringFromReturn( IOReturn rtn );
virtual int errnoFromReturn( IOReturn rtn );
virtual bool serializeProperties( OSSerialize * s );
virtual void PMinit( void );
virtual void PMstop( void );
virtual void joinPMtree( IOService * driver );
//typedef char IOPMPowerState;
typedef int IOPMPowerFlags;
virtual IOReturn registerPowerDriver(IOService * controllingDriver,IOPMPowerState * powerStates,unsigned long numberOfStates );
virtual IOReturn requestPowerDomainState(IOPMPowerFlags desiredState,IOPowerConnection * whichChild,unsigned long specificationFlags );
virtual bool activityTickle(unsigned long type,unsigned long stateNumber);
virtual IOReturn setAggressiveness(unsigned long type,unsigned long newLevel );
virtual IOReturn getAggressiveness(unsigned long type,unsigned long * currentLevel );
virtual IOReturn addPowerChild( IOService * theChild );
virtual IOReturn removePowerChild( IOPowerConnection * theChild );
virtual IOReturn setIdleTimerPeriod( unsigned long period );
virtual IOReturn setPowerState(unsigned long powerStateOrdinal,IOService *   whatDevice );
virtual unsigned long maxCapabilityForDomainState( IOPMPowerFlags domainState );
virtual unsigned long initialPowerStateForDomainState( IOPMPowerFlags domainState );
virtual unsigned long powerStateForDomainState( IOPMPowerFlags domainState );
virtual IOReturn powerStateWillChangeTo(IOPMPowerFlags  capabilities,unsigned long   stateNumber,IOService *     whatDevice );
virtual IOReturn powerStateDidChangeTo(IOPMPowerFlags  capabilities,unsigned long   stateNumber,IOService *     whatDevice );
virtual bool askChangeDown( unsigned long );
virtual bool tellChangeDown( unsigned long );
virtual void tellNoChangeDown( unsigned long );
virtual void tellChangeUp( unsigned long );
virtual IOReturn allowPowerChange( unsigned long refcon );
virtual IOReturn cancelPowerChange( unsigned long refcon );
virtual void powerChangeDone( unsigned long stateNumber );
IOService * probe( IOService *provider,SInt32 *score );
