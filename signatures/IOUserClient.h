IOReturn releaseAsyncReference64(uint64_t * reference);
void setAsyncReference64(uint64_t * asyncRef, ipc_port * wakePort, mach_vm_address_t callback, uint64_t * refcon, task_t task);
IOReturn releaseNotificationPort( ipc_port * ipc_port);
IOMemoryMap * removeMappingForDescriptor( IOMemoryDescriptor *memory);
IOReturn sendAsyncResult64WithOptions(uint64_t * reference,  IOReturn result, uint64_t *args, UInt32 numArgs,  IOOptionBits options);
OSObject * copyClientEntitlement(task_t task, const char *entitlement);
virtual kern_return_t Dispatch(const IORPC rpc);
virtual bool init();
virtual void free();
virtual const OSMetaClass * getMetaClass();
virtual bool init_1( OSDictionary * dictionary );
virtual bool initWithTask(task_t owningTask, void * securityToken, UInt32 type,OSDictionary * properties);
virtual bool initWithTask_1(task_t owningTask, void * securityToken, UInt32 type);
virtual IOReturn clientClose( void );
virtual IOReturn clientDied( void );
virtual IOService * getService( void );
virtual IOReturn registerNotificationPort_1(ipc_port * port, UInt32 type, UInt32 refCon );
virtual IOReturn getNotificationSemaphore( UInt32 notification_type,void * semaphore );
virtual IOReturn connectClient( IOUserClient * client );
virtual IOReturn clientMemoryForType( UInt32 type,IOOptionBits * options,IOMemoryDescriptor ** memory );
virtual IOReturn exportObjectToClient(task_t task, OSObject *obj, void *clientObj);
virtual IOExternalMethod * getExternalMethodForIndex( UInt32 index );
virtual IOExternalAsyncMethod * getExternalAsyncMethodForIndex( UInt32 index );
virtual IOExternalMethod * getTargetAndMethodForIndex( IOService ** targetP, UInt32 index );
virtual IOExternalAsyncMethod * getAsyncTargetAndMethodForIndex( IOService ** targetP, UInt32 index );
virtual IOExternalTrap * getExternalTrapForIndex( UInt32 index );
virtual IOExternalTrap * getTargetAndTrapForIndex( IOService **targetP, UInt32 index );
virtual IOReturn externalMethod(uint32_t selector, IOExternalMethodArguments *arguments,IOExternalMethodDispatch *dispatch,OSObject *target, void *reference);
virtual IOReturn registerNotificationPort(ipc_port * port, UInt32 type, uint64_t refCon);